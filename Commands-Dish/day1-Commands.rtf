{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c74902;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19600\viewh11900\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
lsb_release  -a\
docker --version\
docker run hello-world\
docker images\
docker --help\
docker pull hello-world\
docker ps\
docker pull centos\
docker images\
docker run --name c1 -it -d ubuntu\
docker run --help\
docker exec -it c1 bash\
docker run --name nginx -it -d nginx\
docker ps\
docker run --help\
docker run --name nginx2 -it nginx\
docker logs nginx\
docker logs -f nginx\
docker exec -it c1 bash\
vi http_server.py\
vi requirements.txt\
cat requirements.txt\
cat https_server.py\
cat http_server.py\
cat requirements.txt\
vi Dockerfile\
docker build --help\
docker build -t img:1.0 .\
cat Dockerfile\
cat http_server.py\
cat requirements.txt\
docker images\
docker run -d --name first -p 8081:8080 img:1.0\
docker ps\
docker ps -a\
docker logs first\
docker rm $(docker ps -a)\
docker run -d --name first -p 8081:8080 img:1.0\
docker logs first\
docker rmi img:1.0\
docker rmi -f img:1.0\
docker build -t img:1.0 .\
docker rm first\
docker run -d --name first -p 8081:8080 img:1.0\
docker run -d --name first -p 8080:8080 img:1.0\
docker rm first\
docker run -d --name first -p 8080:8080 img:1.0\
docker rmi -f img:1.0\
docker build -t img:1.0 .\
docker run -d --name first -p 8080:8080 img:1.0\
docker rm first\
docker run -d --name first -p 8080:8080 img:1.0\
docker exec -it first bash\
\
docker run -d --name third -p 8080:8080 gbhure/myapp1:1.0\
docker ps\
curl localhost:8080\
docker images\
docker exec -it third bash\
docker logs -f third\
docker exec -it third bash\
docker logs -f third\
docker login\
docker push img:2.0\
docker images\
docker tag img:2.0 gbhure/img:2.0\
docker images\
docker exec -it c1 bash\
curl localhost:80\
docker stop c1\
docker rm c1\
docker run --name c1 -it -p 80:80 -d ubuntu\
curl localhost:80\
docker exec -it c1 bash\
curl localhost:80\
docker commit c1 ubuntu_apache:1.0\
docker images\
docker stop c1\
docker rm c1\
docker run --name c2 -it -p 82:80 -d ubuntu_apache:1.0\
curl localhost:82\
docker logs -f third\
docker logs -f c2\
docker exec -it c2 bash\
curl localhost:82\
docker exec -it c2 bash\
vi test.html\
docker cp test.html c2:/var/www/html/\
docker exec -it c2 bash\
curl localhost:82/test.html\
cd /var/lib/docker/overlay2/\
docker images\
docker ps\
docker images\
docker save ubuntu_apache:1.0 -o ub_ap.tar\
ls -ltrh\
docker images\
docker stop c2\
docker rm c2\
docker ps\
docker images\
docker rmi ubuntu_apache:1.0\
docker images\
docker load -i ub_ap.tar\
docker images\
docker ps\
docker stats\
docker stats third\
docker stats nginx\
docker run -m 4m --name c2 -it -p 82:80 -d ubuntu_apache:1.0\
\
\
\
\
$ sudo -s\
# apt update\
# apt install docker.io   \'97 install container runtime engine i.e. docker\
\
# docker version\
# docker -h\
# docker ps\
# docker images\
\
\
# docker pull gbhure/web\
# docker run -d --name web1 gbhure/web\
\
# docker ps\
# docker ps -a\
# docker stop 72b3c3083d6e \'97> stop container \'97 switch of your computer\
# docker rm 72b3c3083d6e \'97> remove container\
# docker rmi 26b77e58432b \'97> remove image\
\
# docker run -d --name web1 gbhure/web\
# docker stop 843f68024047a1ff084cf15e99c7c99c66d90f7b9322821c9d0e38c130bbc737\
# docker rm 843f68024047a1ff084cf15e99c7c99c66d90f7b9322821c9d0e38c130bbc737\
# docker run -d --name web1 -p 8081:8080 gbhure/web\
\
# docker ps\
# curl localhost:8081\
# docker exec -it web1 bash\
# docker rm first\
\
\
\
# mkdir docker\
# cd docker\
\
\
Create an flask application \'97 app.py\
And build your own image\'85\
\
from flask import Flask\
import os\
\
app = Flask(__name__)\
@app.route('/')\
def hello():\
    return('Hello from container..')\
\
if __name__ == '__main__':\
    app.run(host='0.0.0.0', port=8080, debug=True)\
\
Create a Dockerfile \'97 Dockerfile\
FROM python:2.7\
COPY . /tmp\
RUN pip install -r /tmp/requirements.txt\
EXPOSE 8080\
ENTRYPOINT ["echo"]\
CMD ["python", "/tmp/app.py"]\
\
Create requirements.txt\
flask\
\
\
\
Build a docker image\
# docker build -t img2:1.0 .\
# docker images\
# docker run -d \'97\'97name first -p 8081:8080 img2:1.0        # port binded is 8081 on host \'97 port forwarding\
# docker ps\
# curl localhost:8081\
# docker rm first\
\
\
\
# docker login\
# docker tag img2:1.0 gbhure/img2:1.0\
# docker push gbhure/img2:1.0\
# docker rmi gbhure/img2:1.0\
\
\
\
docker rmi -f $(docker images -a -q)\
docker stop $(docker ps -a -q)\
docker rm $(docker ps -a -q)\
\
\
\
docker run -d -p 5000:5000 --restart=always --name myregistry registry:2\
docker pull ubuntu:16.04\
docker tag ubuntu:16.04 localhost:5000/my-ubuntu\
docker push localhost:5000/my-ubuntu\
docker image remove ubuntu:16.04\
docker image remove localhost:5000/my-ubuntu\
docker pull localhost:5000/my-ubuntu\
\
\
created dockerfile with CMD once it done then why after execution conatiner stoppped\
run with -itd\
\
FROM alpine:latest\
RUN ls\
RUN echo "hello"\
CMD [\'93df -h\'93]\
\
\
\
\
}